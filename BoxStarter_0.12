#!/bin/bash

#####################################################
####                                             ####
##       OVH Config Script v. 0.12.brandynew       ##
##                                                 ##
##                                                 ##
## Usage:  This script is meant to be run when you ##
##         log into a new system for the first     ##
##         time.   From then on, it can be re-run  ##
##         periodically to make sure that the      ##
##         system is secure.                       ##
##                                                 ##
## Notice: This script is still in the very early  ##
##         stages.  It's also the first bash       ##
##         script that I have ever written.  So    ##
##         if you see aything or have any tips,    ##
##         please let meknow.  Any feedback would  ##
##         really be really be appreciated.        ##
##                                                 ##
## .:Please don't share this script w/o approval:. ##
##                                                 ##
## Other Notes:                                    ##
##                                                 ##
##         This script has only been tested on OVH ##
##         running Arch. It uses programs and file ##
##         locations that should be included by    ##
##         default on most major distros, and it   ##
##         is intended to work on most distros out ##
##         of the box.  The aim is to have it be   ##
##         able to run this no matter what is      ##
##         being used.  So if you notice something ##
##         that is not working properly, please    ##
##         take down the distro you are using, and ##
##         and let me know what the error was.     ##
###                                               ###
####                            -Aesop           ####
##                                                 ##
#                                                   #
# +-----------------------------------------------+ #
# |                ~ User Config ~                | #
# +-----------------------------------------------+ #
#                                                   #
#                                                   #
#  The following settings adjust the recommended    #
#  values for SSHD.  In the script you will have    #
#  the option to insert these values into           #
#  sshd_config                                      #
#                                                   #
#                                                   #

SSHDCONFIG_LOCATION="/etc/ssh/sshd_config"
SSHDCONFIG_PROTOCOL="2"
SSHDCONFIG_ROOTLOGIN="no"
SSHDCONFIG_X11Forward="no"
SSHDCONFIG_USEDNS="no"
IPTABLES_IFACE="eth0"

START_A_ROFLCOPTER="no"

#===================================================#
#                ~ End User Config ~                #
#===================================================#
#####################################################



#Run as root, of course.
ROOT_UID=0     # Only users with $UID 0 have root privileges.
E_NOTROOT=87   # Non-root exit error.

if [ "$UID" -ne "$ROOT_UID" ]
then
	echo
	echo "Must be root to run this script.  "
	echo
	echo "U Mad bro?  "
	echo
	exit $E_NOTROOT
fi  

# Text color variables
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
NORMAL=$(tput sgr0)

# ^C abort, script cleanup
trap sigtrap INT
sigtrap()
    {
    # make cursor visible again
    tput cnorm

    # reset cursor
    tput_loop "cud1"

    echo "caught signal SIGINT(CTRL+C), quitting ..."
    exit 1
    }

# Y/N confirmation 
asksure() {
echo -n " (Y/N) "
while read -r -n 1 -s answer; do
	if [[ $answer = [YyNn] ]]; then
		[[ $answer = [Yy] ]] && retval=0
		[[ $answer = [Nn] ]] && retval=1
	break
	fi
done
return $retval
}

# Centering text
# usage: txt_center [offset] {n [for newline]} "TEXT"
txt_center() {
if [[ $2 == "n" ]] ; then
	TEXT=$3
	printf "%*s\n" $((((${#TEXT}+$(tput cols))/2)+$1)) "$TEXT"
else
	TEXT=$2
	printf "%*s" $((((${#TEXT}+$(tput cols))/2)+$1)) "$TEXT"
fi
}

# Determining Distribution & Installers
if command -v dpkg &>/dev/null; then
	DISTRO="debian-based" &&
	get_pkg() {
		apt-get install $PACKAGE
	};
elif command -v pacman &>/dev/null; then
	DISTRO="arch" &&
	get_pkg() {
		pacman -Syu $PACKAGE
	};
elif command -v emerge &>/dev/null; then
	DISTRO="gentoo" &&
	get_pkg() {
		emerge $PACKAGE
	};
elif command -v rpm &>/dev/null; then
	DISTRO="fedora-based" &&
	get_pkg() {
		echo " looks like your system is fedora-based.  Please install $PACKAGE in a new window"
	};
else 
	echo " What distro are you using?  Shouldn't you already have a script that does exactly this?"
fi
function DO_GOOD {
     printf "%*s\n" $(($(tput cols)-(${#TEXT}-8))) "$GOOD_F"
}
# Banner
clear
echo -n "$BLUE"
printf "%$(tput cols)s\n"|tr ' ' '_'
echo -n "$NORMAL"
echo "$(tput setaf 3)
           )     )      (                  (                (     
    (   ( /(  ( /(      )\ )  *   )  (     )\ )  *   )      )\ )  
  ( )\  )\()) )\())    (()/(\` )  /(  )\   (()/(\` )  /( (   (()/( $(tput bold)
  )((_)((_)\ ((_)\      /(_))( )(_))((_)  (/(_))( )(_)))\   /(_)) 
 ((_)_   ((_)__((_)    (_)) (_(_()) ( _ )((_)) (_(_())((_) (_))   $(tput setaf 1) 
  | _ ) / _ \\\ \/ /    / __||_   _|  /_\  | _ \|_   _|| __|| _ \  $(tput sgr0)$(tput setaf 1) 
  | _ \| (_) |>  <     \__ \  | |   / ^ \ |   /  | |  | _| |   /  
  |___/ \___//_/\_\    |___/  |_|  /_/ \_\|_|_\  |_|  |___||_|_\  $(tput sgr0)"

echo -n "$BLUE"
printf "%$(tput cols)s\n"|tr ' ' '_'
echo "$NORMAL"
echo

# Status Text Formatting
DONE_F="[$GREEN DONE $NORMAL]"
GOOD_F="[$GREEN GOOD $NORMAL]"
FOUND_F="[$RED SHIT $NORMAL]"
function DO_DONE {
     printf "%*s\n" $(($(tput cols)-(${#TEXT}-8))) "$DONE_F"
}
function DO_GOOD {
     printf "%*s\n" $(($(tput cols)-(${#TEXT}-8))) "$GOOD_F"
}
function DO_FOUND {
     printf "%*s\n" $(($(tput cols)-(${#TEXT}-8))) "$FOUND_F"
}

## Beginnng of script
TEXT="  Initiating script:"
echo -n "$TEXT"
DO_DONE


##Checking email
TEXT="  Checking for email:"
echo -n "$TEXT"
if [ -e "/root/.email" ]; then
  DO_FOUND
  EMAIL=$(cat /root/.email)
  echo -n $CYAN
  printf "%*s\n" $(((${#EMAIL}+$(tput cols))/2)) "$EMAIL" 
  echo 
  echo -n "$NORMAL  Do you want to delete this email address from the system?"
  if asksure; then
    echo "$CYAN $answer"
    TEXT="  Removing /root/.email..."
    echo -n "$NORMAL$TEXT" && rm /root/.email
    DO_DONE
  else
    echo "$CYAN skipping... $NORMAL"
    echo
  fi
else
  DO_GOOD
  #TEXT="email already removed"
  #echo -n "$CYAN"
  #printf "%*s\n" $(((${#TEXT}+$(tput cols))/2)) "$TEXT"
  #echo -n "$NORMAL"
fi

##Checking SSH Keys
TEXT="  Checking Authorized SSH Keys in /root:"
echo -n "$TEXT"
if [ -e "/root/.ssh/authorized_keys2" ]; then
  DO_FOUND
  echo "$CYAN"
  cat /root/.ssh/authorized_keys2
  echo
  echo -n "$NORMAL  Do you want to remove these keys?"
  if asksure; then
    echo "$CYAN $answer"
    TEXT="  Removing /root/.ssh/authorized_keys2..."
    echo -n "$NORMAL$TEXT" && rm /root/.ssh/authorized_keys2
    DO_DONE
  else
    echo "$CYAN skipping... $NORMAL"
    echo
  fi
else
  DO_GOOD
#  TEXT="  (authorized_keys2 does not exist in root)"
#  echo -n "$CYAN"
#  printf "%*s\n" $(((${#TEXT}+$(tput cols))/2)) "$TEXT"
#  echo -n "$NORMAL"
fi

##Check for RTM
TEXT="  Checking for RTM:"
echo -n "$TEXT"
if [ -e "/usr/local/rtm" ]; then
	DO_FOUND
	echo -n "$CYAN"
	tail /etc/crontab
	echo -n "$NORMAL  Do you want to remove RTM spyware?"
	if asksure; then
		echo "$CYAN $answer"
		TEXT="  Removing /usr/local/rtm..."
		echo -n "$NORMAL$TEXT" && rm -r /usr/local/rtm
		DO_DONE
		else
		echo "$CYAN skipping... $NORMAL"
		echo
	fi
	echo -n "$NORMAL  Do you want to edit crontab?"
	if asksure; then
		echo "$CYAN $answer"
		TEXT="  Choose your editor: (vim, nano, emacs) "
		echo -n "$NORMAL$TEXT$CYAN" 
		read -r EDITOR 
		echo -n "$NORMAL" 
		case $EDITOR in
			vim|Vim|VIM)
				vim /etc/crontab
				;;
			nano|Nano|NANO)
				nano /etc/crontab
				;;
			emacs|Emacs|EMACS)
				emacs /etc/crontab
				;;
			*) echo "Unsupported Editor"
				;;
		esac
	else
		echo "$CYAN skipping... $NORMAL"
		echo
	fi
else
	DO_GOOD
fi

##Add User
TEXT="  Listing all users:   "
echo -n "$TEXT"
echo -n "$YELLOW"
cut -d: -f1 /etc/passwd | sed -e :a -e '{N; s/\n/  /g; ta}'
echo -n "$NORMAL  Listing home directories:   $YELLOW"
ls /home
echo
echo -n "$NORMAL  Would you like to create a user?"
  if asksure; then
    echo "$CYAN $answer"
    TEXT="  Starting adduser..."
    echo -n "$NORMAL$TEXT"
    DO_DONE
    adduser
  else
    echo "$CYAN skipping... $NORMAL"
    echo
  fi
TEXT="  Listing users that have sudo:   "
echo -n "$TEXT"
echo -n "$YELLOW"
grep -v '^$' /etc/sudoers |grep -v '^ *#' |sed -e :a -e '{N; s/\n/  /g; ta}'
echo
echo -n "$NORMAL  Would you like to edit this?"
if asksure; then
	echo "$CYAN $answer"
	echo "$NORMAL   visudo uses vi, here's a refresher..."
	echo
	echo "   [ESC] will always bring you back to navigation/command mode"
	echo "  "i" will start insert mode"
	echo "   ":q!" will exit without saving changes, ":x" or "ZZ" will exit saving changes"
	echo
	TEXT="  Press [$CYAN Enter $NORMAL] key to start visudo... (ctrl-c exits)"
	printf "%*s\n" $(((${#TEXT}+$(tput cols))/2)) "$TEXT"
	read -p ""
	visudo
else   
	#echo "$CYAN $answer"
	echo "$CYAN skipping... $NORMAL"
	echo
fi
TEXT="  User Config:"
echo -n "$NORMAL$TEXT"
DO_DONE
echo

##SSH config
TEXT="  Current SSH preferences:"
echo "$TEXT"
#sed escape and color codes    [http://www.frexx.de/xterm-256-notes/]
#   escape: \x1b    yellow:[33m    default:[0m    boldyellow:[1;33m   cyan:[36m 
#sed -n=do not print whole file, sed -n 's[for 'substitute'/[match string]/[put string {'&' matches find string}]/["p will print matches"]'
echo
echo "$YELLOW  $(tput smul)Current		$(tput bold)Suggested$(tput rmul)$NORMAL"
sed -n 's/^#[Pp]ort.*/  \x1b[33m&\x1b[0m	\x1b[1;33mrandom \(not 22\)\x1b[0m/p' $SSHDCONFIG_LOCATION 
sed -n 's/^[Pp]ort.*/  \x1b[36m&\x1b[0m		\x1b[1;33mrandom \(not 22\)\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^#[Pp]rotocol.*/  \x1b[33m&\x1b[0m		\x1b[1;33m'$SSHDCONFIG_PROTOCOL'\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^[Pp]rotocol.*/  \x1b[36m&\x1b[0m		\x1b[1;33m'$SSHDCONFIG_PROTOCOL'\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^#[Pp]ermit[Rr]oot[Ll]ogin.*/  \x1b[33m&\x1b[0m	\x1b[1;33m'$SSHDCONFIG_ROOTLOGIN'\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^[Pp]ermit[Rr]oot[Ll]ogin.*/  \x1b[36m&\x1b[0m	\x1b[1;33m'$SSHDCONFIG_ROOTLOGIN'\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^#[Xx]11[Ff]orwarding.*/  \x1b[33m&\x1b[0m	\x1b[1;33m'$SSHDCONFIG_X11Forward'\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^[Xx]11[Ff]orwarding.*/  \x1b[36m&\x1b[0m	\x1b[1;33m'$SSHDCONFIG_X11Forward'\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^#[Uu]se[Dd][Nn][Ss].*/  \x1b[33m&\x1b[0m		\x1b[1;33m'$SSHDCONFIG_USEDNS'\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^[Uu]se[Dd][Nn][Ss].*/  \x1b[36m&\x1b[0m		\x1b[1;33m'$SSHDCONFIG_USEDNS'\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^#[Aa]llow[Uu]sers.*/  \x1b[33m&\x1b[0m	\x1b[1;33myour user \(not root\)\x1b[0m/p' $SSHDCONFIG_LOCATION
sed -n 's/^[Aa]llow[Uu]sers.*/  \x1b[36m&\x1b[0m	\x1b[1;33myour user \(not root\)\x1b[0m/p' $SSHDCONFIG_LOCATION
echo
echo -n "  Would you like to overwrite using the suggested settings?"
if asksure; then
	echo "$CYAN $answer"
	echo
	echo -n "$NORMAL  Choose your SSH port number:  "
	echo -n "$CYAN"
	read sshportnumber
	echo "$NORMAL  For multiple users, edit $SSHDCONFIG_LOCATION directly."
	echo -n "  What user should have access to SSH: "
	echo -n "$CYAN"
	read sshuserlist
	echo "$NORMAL"
	TEXT="  This will update the current settings to their suggested values."
	printf "%*s\n" $(((${#TEXT}+$(tput cols))/2)) "$TEXT"
	TEXT="Press [$CYAN Enter $NORMAL] key to continue... (ctrl-c exits)"
	printf "%*s\n" $(((${#TEXT}+$(tput cols))/2)) "$TEXT"
	read -s -p ""
	echo 
	TEXT="  Updating sshd_config with recommended settings:"
	echo -n "$NORMAL$TEXT"
	sed -i 's/^[Pp]ort.*/Port '$sshportnumber'/' $SSHDCONFIG_LOCATION
	sed -i 's/^#[Pp]ort.*/Port '$sshportnumber'/' $SSHDCONFIG_LOCATION
	sed -i 's/^[Pp]rotocol.*/Protocol '$SSHDCONFIG_PROTOCOL'/' $SSHDCONFIG_LOCATION
	sed -i 's/^#[Pp]rotocol.*/Protocol '$SSHDCONFIG_PROTOCOL'/' $SSHDCONFIG_LOCATION
	sed -i 's/^[Pp]ermit[Rr]oot[Ll]ogin.*/PermitRootLogin '$SSHDCONFIG_ROOTLOGIN'/' $SSHDCONFIG_LOCATION
	sed -i 's/^#[Pp]ermit[Rr]oot[Ll]ogin.*/PermitRootLogin '$SSHDCONFIG_ROOTLOGIN'/' $SSHDCONFIG_LOCATION
	sed -i 's/^[Xx]11[Ff]orwarding.*/X11Forwarding '$SSHDCONFIG_X11Forward'/' $SSHDCONFIG_LOCATION
	sed -i 's/^#[Xx]11[Ff]orwarding.*/X11Forwarding '$SSHDCONFIG_X11Forward'/' $SSHDCONFIG_LOCATION
	if grep -q UseDNS $SSHDCONFIG_LOCATION; then
		sed -i 's/^[Uu]se[Dd][Nn][Ss].*/UseDNS '$SSHDCONFIG_USEDNS'/' $SSHDCONFIG_LOCATION
		sed -i 's/^#[Uu]se[Dd][Nn][Ss].*/UseDNS '$SSHDCONFIG_USEDNS'/' $SSHDCONFIG_LOCATION
	else
		echo "UseDNS $SSHDCONFIG_USEDNS" >> $SSHDCONFIG_LOCATION
	fi
	if grep -q AllowUsers $SSHDCONFIG_LOCATION; then
		sed -i 's/^[Aa]llow[Uu]sers.*/AllowUsers '$sshuserlist'/' $SSHDCONFIG_LOCATION
		sed -i 's/^#[Aa]llow[Uu]sers.*/AllowUsers '$sshuserlist'/' $SSHDCONFIG_LOCATION
	else
		echo "AllowUsers $sshuserlist" >> $SSHDCONFIG_LOCATION
	fi
	DO_DONE	
	TEXT="  Restarting the ssh daemon..."
	echo "$NORMAL$TEXT"
	if command -v dpkg &>/dev/null; then
		/etc/init.d/sshd restart
	else
		if command -v pacman &>/dev/null; then
		rc.d restart sshd
		else
			if command -v rpm &>/dev/null; then
			/etc/init.d/sshd restart
			else
			echo "$RED  Your distro is not currently supported.$NORMAL  You will have to restart sshd manually."
			fi
		fi
	fi
	echo
#by Aesop
else
	echo "$CYAN skipping... $NORMAL"
fi
## Additional Security 
#
# This section will eventually contain 
# - rootkit checks
# - nmap outputs
#
# Some other network checks:
# netstat -lptu
# netstat -nap
# lsof -i
#
#####  Future Tests Here  #####
#TEXT="  Checking other security settings:"
#echo -n "$NORMAL$TEXT"
#DO_DONE
TEXT="  Checking other security settings:"
echo -n "$NORMAL$TEXT"
DO_DONE

# above not really needed.   Port checker below
echo -n "$NORMAL  Would you like to display active ports?"
if asksure; then
	echo "$CYAN $answer"
	TEXT="  Starting netstat..."
	echo -n "$NORMAL$TEXT"
	DO_DONE
	echo
	netstat -nap |sed 's/^/  /'
	echo
else
	echo "$CYAN skipping... $NORMAL"
fi


## Iptables
do_iptablescheck() {
	txt_center 10 n "$YELLOW`tput smul`Current Tables`tput rmul`$NORMAL"
	echo
	iptables -nvL | sed 's/^/    /'
	echo
}

do_iptablesbackup() {
	echo -n "  Backup existing iptables?"
	if asksure; then
		echo "$CYAN $answer"
	fi
}

do_flushtables() {
	echo -n "$NORMAL  Would you like to flush iptables before adding rules?"
	if asksure; then
		echo "$CYAN $answer"
		TEXT="  Flushing current iptables:"
		echo -n "$NORMAL$TEXT"
		iptables -F && DO_DONE
	else
		echo "$CYAN skipping... $NORMAL"
	fi
}

# default beginning rules (eventually modify so output rules aren't set to accept by default)
do_iptables.start() {
	TEXT="  Creating user-defined TCP and UDP chains:" ; echo -n "$NORMAL$TEXT"
	iptables -N TCP && iptables -N UDP && DO_DONE
	TEXT="  Setting rule to DROP FORWARD packets:" ; echo -n "$NORMAL$TEXT"
	iptables -P FORWARD DROP && DO_DONE
	TEXT="  Setting rule to ACCEPT OUTPUT packets:" ; echo -n "$NORMAL$TEXT"
	iptables -P OUTPUT ACCEPT && DO_DONE
	TEXT="  Setting rule to ACCEPT RELATED and ESTABLISHED packets:" ; echo -n "$TEXT"
	iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT && DO_DONE
}

do_iptsshport() {
	if [ -n "$sshportnumber" ] ; then
	echo -n "$NORMAL  Would you like to allow incoming on ssh port$CYAN $sshportnumber $NORMAL?"
		if asksure; then
			echo "$CYAN $answer $NORMAL"
			TEXT="  Adding $CYAN$sshportnumber$NORMAL to iptables:" ; echo -n "$TEXT  "
			iptables -A TCP -p tcp --dport $sshportnumber -j ACCEPT && DO_DONE
		else
			echo "$CYAN skipping... $NORMAL"
		fi
	else
	echo -n "  Which port are you using for SSH?"
	echo -n "$CYAN"
	read -p " " port_number
	echo -n "$NORMAL"
	if [[ $port_number =~ ^[0-9]+$ ]]; then
		if [ "$port_number" -gt 70000 ]; then
			echo "  ERROR: $CYAN$port_number$NORMAL is not a valid port number... too big";
		else 
			TEXT="  Adding $CYAN$port_number$NORMAL to iptables:" 
			echo -n "$TEXT         "
			iptables -A TCP -p tcp --dport $port_number -j ACCEPT && DO_DONE 
		fi
	else
		echo "  ERROR: $CYAN$port_number$NORMAL is not a valid port number"
	fi
	fi
}

do_setiptables() {
echo " $RED WARNING$NORMAL: This is where you open ports for your firewall.. "
echo "           i.e. 80 and 443 for webservers"
while [ "$port_number" != "done" ]     
do
	echo -n "  Which incoming port would you like to open?         (type \"done\" to continue)"
	tput cub 34
	echo -n "$CYAN"
	read -p " " port_number
	echo -n "$NORMAL"
	if [[ $port_number =~ ^[0-9]+$ ]]; then
		if [ "$port_number" -gt 70000 ]; then
			tput cuu1 && tput el
			echo "  ERROR: $CYAN$port_number$NORMAL is not a valid port number... too big";
		else 
			tput cuu1 && tput el
			TEXT="  Adding $CYAN$port_number$NORMAL to iptables:" 
			echo -n "$TEXT         "
			iptables -A TCP -p tcp --dport $port_number -j ACCEPT && DO_DONE 
		fi
	elif [ "$port_number" = "done" ]; then
		echo -n
	else
		tput cuu1 && tput el
		echo "  ERROR: $CYAN$port_number$NORMAL is not a valid port number"
	fi
done
}

do_iptables.defaults() {
	TEXT="  Setting default drop rule:" ; echo -n "$TEXT"
	iptables -P INPUT DROP && DO_DONE
	TEXT="  Setting rule to allow loopback device connections:" ; echo -n "$TEXT"
	iptables -A INPUT -i lo -j ACCEPT && DO_DONE
	TEXT="  Setting rule to DROP INVALID packets:" ; echo -n "$TEXT"
	iptables -A INPUT -m conntrack --ctstate INVALID -j DROP && DO_DONE
	TEXT="  Setting rule to allow incoming ICMP echo requests (pings):" ; echo -n "$TEXT"
	iptables -A INPUT -p icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT && DO_DONE
	TEXT="  Appending the OPEN chains to INPUT:" ; echo -n "$TEXT"
	iptables -A INPUT -p udp -m conntrack --ctstate NEW -j UDP
	iptables -A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP && DO_DONE
	TEXT="  Setting default TCP and UDP behavior:" ; echo -n "$TEXT"
	iptables -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
	iptables -A INPUT -p tcp -j REJECT --reject-with tcp-rst && DO_DONE
	TEXT="  Setting rule to reject other traffic:" ; echo -n "$TEXT"
	iptables -A INPUT -j REJECT --reject-with icmp-proto-unreachable && DO_DONE
}

echo -n "$NORMAL  Would you like to setup iptables?"
if asksure; then
	echo "$CYAN $answer"
	TEXT="  Starting iptables:"
	echo -n "$NORMAL$TEXT"
	if command -v iptables &>/dev/null; then
		DO_DONE
		do_iptablescheck
		do_flushtables
		do_iptables.start
		do_iptsshport
		do_iptables.defaults
		do_setiptables
		iptables-save > /etc/iptables/iptables.rules
		echo
	else
		DO_FOUND
		echo -n "$NORMAL  iptables does not appear to be installed.  Install now?"
		if asksure; then
			echo "$CYAN $answer"
			TEXT="  Installing iptables:"
			echo -n "$NORMAL$TEXT"
			DO_DONE
			PACKAGE="iptables"
			get_pkg
			if [[ $distro == arch ]] ; grep -q iptables /etc/rc.conf; then
				TEXT="  Checking if iptables is a daemon in /etc/rc.conf:"
				echo -n "$NORMAL$TEXT" 
				DO_DONE
			else
				TEXT="  Adding iptables to daemon list in /etc/rc.conf:"
				echo -n "$NORMAL$TEXT" 
				sed -i 's/network.*/iptables &/' /etc/rc.conf && DO_DONE
			fi
			do_iptablescheck
			do_iptables.start
			do_flushtables
			do_iptsshport
			do_iptables.defaults
			do_setiptables
			iptables-save > /etc/iptables/iptables.rules
			echo
		else
			echo "$CYAN skipping... $NORMAL"
			echo
		fi
	fi
else
	echo "$CYAN skipping... $NORMAL"
	echo
fi

txt_center 0 n "You should also install fail2ban, or better: force ssh keys only"
txt_center 0 n "using ssh-keygen"
txt_center 0 n "ssh-copy-id -i ~/.ssh/id_rsa.pub '-p <portnumber> <username>@remote-server.org'"
sleep 2 
echo
txt_center 0 n "Open a new ssh session with the user you created, if necessary."
echo -n "$YELLOW$(tput bold)"
txt_center 0 n "BUT KEEP THIS WINDOW OPEN"
echo "$NORMAL"
sleep 7
txt_center 0 n "If everything is good, you can close this window."
if [[ $START_A_ROFLCOPTER == no ]]; then
	exit 0
else
	TEXT="  Starting the ROFLCOPTER:"
	echo
	echo -n "$NORMAL$TEXT"
	sleep 1
	DO_DONE
	IMGS=(
"
                         \n\
 ROFL:ROFL:LOL:          \n\
        ____^____        \n\
      _/      [] \       \n\
 LOL==_  FSC      \      \n\
       \___________]     \n\
          I     I        \n\
        ----------/      \n
" "
                         \n\
          :LOL:ROFL:ROFL \n\
        ____^____        \n\
  L   _/      [] \       \n\
  O ==_  FSC      \      \n\
  L    \___________]     \n\
          I     I        \n\
        ----------/      \n
" "
                         \n\
 ROFL:ROFL:LOL:          \n\
        ____^____        \n\
      _/      [] \       \n\
 LOL==_  FSC      \      \n\
       \___________]     \n\
          I     I        \n\
        ----------/      \n
" "
                         \n\
          :LOL:ROFL:ROFL \n\
        ____^____        \n\
  L   _/      [] \       \n\
  O ==_  FSC      \      \n\
  L    \___________]     \n\
          I     I        \n\
        ----------/      \n
" "
 ROFL:ROFL:LOL:          \n\
        ____^____        \n\
      _/      [] \       \n\
 LOL==_  FSC      \      \n\
       \___________]     \n\
          I     I        \n\
        ----------/      \n\
                         \n
" "
          :LOL:ROFL:ROFL \n\
        ____^____        \n\
  L   _/      [] \       \n\
  O ==_  FSC      \      \n\
  L    \___________]     \n\
          I     I        \n\
        ----------/      \n\
                         \n
" "
 ROFL:ROFL:LOL:          \n\
        ____^____        \n\
      _/      [] \       \n\
 LOL==_  FSC      \      \n\
       \___________]     \n\
          I     I        \n\
        ----------/      \n\
                         \n
" "
          :LOL:ROFL:ROFL \n\
        ____^____        \n\
  L   _/      [] \       \n\
  O ==_  FSC      \      \n\
  L    \___________]     \n\
          I     I        \n\
        ----------/      \n\
                         \n
"
)
REFRESH="0.10"
# end

# count lines of first ascii picture in array
LINES_PER_IMG=$(( $(echo $IMGS[0] | sed 's/\\n/\n/g' | wc -l) + 1 ))

# tput $1 LINES_PER_IMG times, used for cuu1(cursor up) cud1(cursor down)
tput_loop() { for((x=0; x < $LINES_PER_IMG; x++)); do tput $1; done; }

# calculate the indentation
printf "%*s\n" $(((${#TEXT}+$(tput cols))/2))
CHARS_PER_LINE="27"
OFFSET=`expr \( $(tput cols) - $CHARS_PER_LINE \) / 2`
INDENT=`printf "%${OFFSET}s"`

# need multi-space strings
IFS='%'

# hide the cursor
tput civis

# main loop, pretty self explanatory
while [ 1 ]; do for x in "${IMGS[@]}"; do
        echo -ne $x
        tput_loop "cuu1"
        sleep $REFRESH
done; done

# will never reach here with the roflcopter, CTRL+C is required to quit
fi
